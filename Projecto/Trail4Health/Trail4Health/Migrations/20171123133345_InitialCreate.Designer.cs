// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Trail4Healthtest.Data;

namespace Trail4Healthtest.Migrations
{
    [DbContext(typeof(TrailsDbContext))]
    [Migration("20171123133345_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Trail4Healthtest.Models.AgendaTuristaTrilho", b =>
                {
                    b.Property<int>("trilhoId");

                    b.Property<int>("turistaId");

                    b.Property<DateTime>("data_fim");

                    b.Property<DateTime>("data_inicio");

                    b.Property<string>("estado_agendado");

                    b.Property<string>("tempo_gasto");

                    b.HasKey("trilhoId", "turistaId");

                    b.ToTable("Agenda");
                });

            modelBuilder.Entity("Trail4Healthtest.Models.Avaliacaocs", b =>
                {
                    b.Property<int>("avaliacaoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("classificacao");

                    b.HasKey("avaliacaoId");

                    b.ToTable("Avaliacao");
                });

            modelBuilder.Entity("Trail4Healthtest.Models.Comentarios", b =>
                {
                    b.Property<int>("comentarioId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("avaliacao");

                    b.Property<string>("comentar");

                    b.Property<string>("duracaoTrilho");

                    b.Property<int>("trilhoId");

                    b.Property<int>("turistaId");

                    b.HasKey("comentarioId");

                    b.HasIndex("turistaId");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("Trail4Healthtest.Models.Desnivel", b =>
                {
                    b.Property<int>("desnivelId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("nome_desnivel");

                    b.Property<string>("observacoes");

                    b.HasKey("desnivelId");

                    b.ToTable("Desnivel");
                });

            modelBuilder.Entity("Trail4Healthtest.Models.Dificuldade", b =>
                {
                    b.Property<int>("dificuldadeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Observacoes");

                    b.Property<string>("nome_dificuldade");

                    b.HasKey("dificuldadeId");

                    b.ToTable("Dificuldade");
                });

            modelBuilder.Entity("Trail4Healthtest.Models.epoca_aconcelhada", b =>
                {
                    b.Property<int>("epocaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("nome_epoca");

                    b.HasKey("epocaId");

                    b.ToTable("EpocaAconcelhada");
                });

            modelBuilder.Entity("Trail4Healthtest.Models.Estado", b =>
                {
                    b.Property<int>("estadoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("nome_estado");

                    b.HasKey("estadoId");

                    b.ToTable("Estado");
                });

            modelBuilder.Entity("Trail4Healthtest.Models.Estado_Trilho", b =>
                {
                    b.Property<int>("estadoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("causa");

                    b.Property<DateTime>("data_fim");

                    b.Property<DateTime>("data_inicio");

                    b.Property<int>("estadoTrilhoId");

                    b.HasKey("estadoId");

                    b.ToTable("EstadoTrilho");
                });

            modelBuilder.Entity("Trail4Healthtest.Models.Etapa", b =>
                {
                    b.Property<int>("etapaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("distancia");

                    b.Property<string>("duracao");

                    b.Property<string>("geolocalizacao");

                    b.Property<string>("nome_etapa");

                    b.HasKey("etapaId");

                    b.ToTable("Etapa");
                });

            modelBuilder.Entity("Trail4Healthtest.Models.Newsletter", b =>
                {
                    b.Property<int>("newletterId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("data");

                    b.Property<string>("descricao");

                    b.Property<byte>("foto");

                    b.HasKey("newletterId");

                    b.ToTable("Newsletter");
                });

            modelBuilder.Entity("Trail4Healthtest.Models.Trilho", b =>
                {
                    b.Property<int>("trilhoId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ativo");

                    b.Property<int>("cod_desnivel");

                    b.Property<int>("cod_dificuldade");

                    b.Property<int>("cod_etapa_aconselhada");

                    b.Property<string>("distancia_a_percorrer");

                    b.Property<string>("duracao_media");

                    b.Property<string>("loc_fim");

                    b.Property<string>("loc_inicio");

                    b.HasKey("trilhoId");

                    b.ToTable("Trilho");
                });

            modelBuilder.Entity("Trail4Healthtest.Models.Turista", b =>
                {
                    b.Property<int>("turistaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("contato_emergencia");

                    b.Property<string>("email");

                    b.Property<int>("nif");

                    b.Property<string>("nome");

                    b.Property<string>("numeroTelefone");

                    b.HasKey("turistaId");

                    b.ToTable("Turista");
                });

            modelBuilder.Entity("Trail4Healthtest.Models.Comentarios", b =>
                {
                    b.HasOne("Trail4Healthtest.Models.Turista", "turista")
                        .WithMany()
                        .HasForeignKey("turistaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
